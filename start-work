#! /bin/bash

set -e -o pipefail

WORKTREE_BASE_DIR=~/src/worktrees
IMAGE_NAME="ghcr.io/johnstrunk/agent-container"

function usage {
    cat - <<EOF
$0: Start using a coding agent on a git worktree
Usage: $0 [<branch_name>]
  <branch_name>: The name of the branch to create or switch to

* Worktrees are stored in $WORKTREE_BASE_DIR.
* If the branch does not exist, it will be created from the current HEAD.
* If the branch exists, it will switch to that branch.
* If not in a git repository or a branch name is not provided, the current directory will be used.
EOF
}

SCRIPT_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

function build_image {
    echo "Building agent container image from $SCRIPT_DIR ..."
    docker build -t "$IMAGE_NAME" "$SCRIPT_DIR"
}

function setup_worktree {
    local worktree_dir="$1"
    local branch_name="$2"
    if [[ -d "$worktree_dir" ]]; then
        echo "Worktree for branch '$branch_name' already exists at $worktree_dir."
    else
        # Check if branch exists
        if git show-ref --verify --quiet "refs/heads/$branch_name"; then
            echo "Adding worktree for existing branch '$branch_name'..."
            git worktree add "$worktree_dir" "$branch_name"
        else
            echo "Creating branch '$branch_name' from current HEAD and adding worktree..."
            git worktree add -b "$branch_name" "$worktree_dir"
        fi
    fi
}

if [[ $# -eq 1  && -d .git ]]; then
    USE_GIT=1
    BRANCH_NAME="$1"
else
    USE_GIT=0
fi

# Ensure the container image is built
build_image

# Create the base directory if it doesn't exist
mkdir -p "$WORKTREE_BASE_DIR"

if [[ "$USE_GIT" == 1 ]]; then
    REPO_NAME="$(basename "$(git rev-parse --show-toplevel)")"
    WORKTREE_DIR="$WORKTREE_BASE_DIR/${REPO_NAME}-${BRANCH_NAME}"
    CONTANIER_NAME="${REPO_NAME}-${BRANCH_NAME}"
    setup_worktree "$WORKTREE_DIR" "$BRANCH_NAME"
else
    echo "Using current directory."
    REPO_NAME="$(basename "$(pwd)")"
    WORKTREE_DIR="$(pwd)"
    CONTANIER_NAME="local-$REPO_NAME"
fi

# Need to make the main repo directory available in the container
if [[ "$USE_GIT" == 1 ]]; then
    MAIN_REPO_DIR=$(awk '{ print $2 }' "${WORKTREE_DIR}/.git")
    MAIN_REPO_DIR="${MAIN_REPO_DIR%%.git*}"
else
    MAIN_REPO_DIR="$(realpath "$(pwd)")"
fi

# Start the agent container, mounting the worktree
echo "Starting agent container on $WORKTREE_DIR..."


# - Give access to the Docker socket to allow starting MCP servers from within the container
# - Mount the main repo directory to allow access to the main repository files for the worktree
# - Mount the pre-commit cache to avoid re-installing pre-commit hooks every time
docker run --rm -it \
    --name "$CONTANIER_NAME" \
    --hostname "$CONTANIER_NAME" \
    -v "$WORKTREE_DIR:/worktree" \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v "$MAIN_REPO_DIR:$MAIN_REPO_DIR" \
    -v "agent-container-pre-commit-cache:/.pre-commit" \
    -w /worktree \
    -e EUID="$(id -u)" \
    -e EGID="$(id -g)" \
    \
    -e GEMINI_API_KEY \
    -v "$HOME/.gemini:/.gemini" \
    \
    -e ANTHROPIC_MODEL \
    -e ANTHROPIC_SMALL_FAST_MODEL \
    -e ANTHROPIC_VERTEX_PROJECT_ID \
    -e CLOUD_ML_REGION \
    -e CLAUDE_CODE_USE_VERTEX \
    -v "$HOME/.claude:/.claude" \
    -v "$HOME/.claude.json:/.claude.json" \
    -v "$HOME/.config/gcloud:/.gcloud" \
    \
    ghcr.io/johnstrunk/agent-container:latest

# If .cloude/settings.local.json exists in the worktree, display its contents
if [[ -f "$WORKTREE_DIR/.claude/settings.local.json" ]]; then
    echo -e "\n\n=== .claude/settings.local.json: ==="
    jq -r . "$WORKTREE_DIR/.claude/settings.local.json"
fi

# Remove the worktree after exiting the container
if [[ "$USE_GIT" == 1 ]]; then
    git worktree remove "$WORKTREE_DIR" || echo "Not removing worktree $(basename "$WORKTREE_DIR"), it may still be in use."
fi
