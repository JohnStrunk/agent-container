#! /bin/bash

set -e -o pipefail

WORKTREE_BASE_DIR=~/src/worktrees
IMAGE_NAME="ghcr.io/johnstrunk/agent-container"

# Paths to mount at the same location inside the container
# Only paths that exist on the host will be mounted
CONTAINER_MOUNTS=(
    "$HOME/.gemini"
    "$HOME/.claude"
    "$HOME/.claude.json"
    "$HOME/.config/gcloud"
    "$HOME/.cache/pre-commit"
)

function usage {
    cat - <<EOF
$0: Start using a coding agent on a git worktree
Usage: $0 [-b <branch_name>] [command...]
  -b <branch_name>: The name of the branch to create or switch to
  command...: Optional command to execute in the container (container will exit after execution)

* Worktrees are stored in $WORKTREE_BASE_DIR.
* If the branch does not exist, it will be created from the current HEAD.
* If the branch exists, it will switch to that branch.
* If not in a git repository or a branch name is not provided, the current directory will be used.
* If a command is provided, it will be executed in the container and the container will exit.
EOF
}

SCRIPT_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

function build_image {
    echo "Building agent container image from $SCRIPT_DIR ..."
    docker build -t "$IMAGE_NAME" "$SCRIPT_DIR"
}

function setup_worktree {
    local worktree_dir="$1"
    local branch_name="$2"
    if [[ -d "$worktree_dir" ]]; then
        echo "Worktree for branch '$branch_name' already exists at $worktree_dir."
    else
        # Check if branch exists
        if git show-ref --verify --quiet "refs/heads/$branch_name"; then
            echo "Adding worktree for existing branch '$branch_name'..."
            git worktree add "$worktree_dir" "$branch_name"
        else
            echo "Creating branch '$branch_name' from current HEAD and adding worktree..."
            git worktree add -b "$branch_name" "$worktree_dir"
        fi
    fi
}

# Parse command line options
BRANCH_NAME=""
CONTAINER_COMMAND=()
USE_GIT=0

while [[ $# -gt 0 ]]; do
    case $1 in
        -b|--branch)
            BRANCH_NAME="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            # All remaining arguments are the command to execute
            CONTAINER_COMMAND=("$@")
            break
            ;;
    esac
done

# Determine if we should use git worktrees
if [[ -n "$BRANCH_NAME" && -d .git ]]; then
    USE_GIT=1
fi

# Ensure the container image is built
build_image

# Create the base directory if it doesn't exist
mkdir -p "$WORKTREE_BASE_DIR"

if [[ "$USE_GIT" == 1 ]]; then
    REPO_NAME="$(basename "$(git rev-parse --show-toplevel)")"
    WORKTREE_DIR="$WORKTREE_BASE_DIR/${REPO_NAME}-${BRANCH_NAME}"
    CONTANIER_NAME="${REPO_NAME}-${BRANCH_NAME}"
    setup_worktree "$WORKTREE_DIR" "$BRANCH_NAME"
else
    echo "Using current directory."
    REPO_NAME="$(basename "$(pwd)")"
    WORKTREE_DIR="$(pwd)"
    CONTANIER_NAME="local-$REPO_NAME"
fi

# Need to make the main repo directory available in the container
if [[ "$USE_GIT" == 1 ]]; then
    MAIN_REPO_DIR=$(awk '{ print $2 }' "${WORKTREE_DIR}/.git")
    MAIN_REPO_DIR="${MAIN_REPO_DIR%%.git*}"
else
    MAIN_REPO_DIR="$(realpath "$(pwd)")"
fi

# Build mount arguments for existing paths
MOUNT_ARGS=()
MOUNTED_PATHS=()
for path in "${CONTAINER_MOUNTS[@]}"; do
    if [[ -e "$path" ]]; then
        MOUNT_ARGS+=("-v" "$path:$path")
        MOUNTED_PATHS+=("$path")
        echo "Mounting: $path"
    else
        echo "Skipping non-existent path: $path"
    fi
done

# Add the main repo directory and worktree directory to the list of paths that need parent ownership fixed
MOUNTED_PATHS+=("$MAIN_REPO_DIR")
MOUNTED_PATHS+=("$WORKTREE_DIR")

# Create colon-separated list of mounted paths for the container
CONTAINER_MOUNT_PATHS=$(IFS=':'; echo "${MOUNTED_PATHS[*]}")

# Core mounts (always needed)
MOUNT_ARGS+=(
    "-v" "$WORKTREE_DIR:$WORKTREE_DIR"
    "-v" "/var/run/docker.sock:/var/run/docker.sock"
    "-v" "$MAIN_REPO_DIR:$MAIN_REPO_DIR"
    "-v" "agent-container-pre-commit-cache:/.pre-commit-fallback"
)

# Start the agent container, mounting the worktree
if [[ ${#CONTAINER_COMMAND[@]} -gt 0 ]]; then
    echo "Starting agent container on $WORKTREE_DIR and executing: ${CONTAINER_COMMAND[*]}"
else
    echo "Starting agent container on $WORKTREE_DIR..."
fi

docker run --rm -it \
    --name "$CONTANIER_NAME" \
    --hostname "$CONTANIER_NAME" \
    "${MOUNT_ARGS[@]}" \
    -w "$WORKTREE_DIR" \
    -e EUID="$(id -u)" \
    -e EGID="$(id -g)" \
    -e HOME="$HOME" \
    -e USER="$USER" \
    -e CONTAINER_MOUNT_PATHS="$CONTAINER_MOUNT_PATHS" \
    -e GEMINI_API_KEY \
    -e ANTHROPIC_MODEL \
    -e ANTHROPIC_SMALL_FAST_MODEL \
    -e ANTHROPIC_VERTEX_PROJECT_ID \
    -e CLOUD_ML_REGION \
    -e CLAUDE_CODE_USE_VERTEX \
    ghcr.io/johnstrunk/agent-container:latest "${CONTAINER_COMMAND[@]}"

# If .cloude/settings.local.json exists in the worktree, display its contents
if [[ -f "$WORKTREE_DIR/.claude/settings.local.json" ]]; then
    echo -e "\n\n=== .claude/settings.local.json: ==="
    jq -r . "$WORKTREE_DIR/.claude/settings.local.json"
fi

# Remove the worktree after exiting the container
if [[ "$USE_GIT" == 1 ]]; then
    git worktree remove "$WORKTREE_DIR" || echo "Not removing worktree $(basename "$WORKTREE_DIR"), it may still be in use."
fi
